/**
 * Created by JMartinez on 5/20/2015.
 */
app.controller('aging-forecast-ctrl', function($scope){

    $scope.is_loaded = true;

    $scope.$watch('is_loaded', function(nv,ov){
        d3.select('#forward').attr('href','#/acs')
        d3.select('#backward').attr('href','#/organizational-roles')
        d3.select('#slide-title-text').text('Increasing Demand for Services ')
    })


    // Various accessors that specify the four dimensions of data to visualize.
    function x(d) { return d.pct_tot; }
    function y(d) { return d.pop_60; }
    function radius(d) { return d.tot_pop; }
    function color(d) { return d.Area; }
    function key(d) { return d.Area; }

// Chart dimensions.
    var margin = {top: 19.5, right: 19.5, bottom: 19.5, left: 49.5},
        width = 960 - margin.right,
        height = 500 - margin.top - margin.bottom;

// Various scales. These domains make assumptions of data, naturally.
    var xScale = d3.scale.linear().domain([0.0, 0.35]).range([0, width]),
        yScale = d3.scale.linear().domain([0, 260000]).range([height, 0]),
        radiusScale = d3.scale.sqrt().domain([0, 700000]).range([0, 40]),
        colorScale = d3.scale.ordinal()
            .range(["#4490AF", "#E16B8F", "#A22E3B", "#739B4E", "#E95D22", "#B5BF4F", "#1D4E89", "#9D8169", "#9E61B0", "#D99937", "#FBC254"]);;

// The x & y axes.
    var xAxis = d3.svg.axis().orient("bottom").scale(xScale).ticks(12, d3.format(",d")).tickFormat(d3.format(".0%")),
        yAxis = d3.svg.axis().scale(yScale).orient("left");

// Create the SVG container and set the origin.
//You can append the SVG graphic generated by D3 to any html tag by replacing "body" with the
//class, ID, or element catagory needed.
    var svg = d3.select(".aging-forecast-chart-canvas").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Add the x-axis.
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

// Add the y-axis.
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

// Add an x-axis label.
    svg.append("text")
        .attr("class", "x label")
        .attr("text-anchor", "end")
        .attr("x", width)
        .attr("y", height - 6)
        .text("Age 60+ as % of total population")
        .style("font-size", "20px");

// Add a y-axis label.
    svg.append("text")
        .attr("class", "y label")
        .attr("text-anchor", "end")
        .attr("y", 6)
        .attr("dy", ".75em")
        .attr("transform", "rotate(-90)")
        .text("Population 60+")
        .style("font-size", "20px");

// Add the year label; the value is set on transition.
    var label = svg.append("text")
        .attr("class", "year label")
        .attr("text-anchor", "end")
        .attr("y", height - 24)
        .attr("x", width)
        .text(1990);

// Load the data.
    d3.json("data/dynamic_bubble_data2.json", function(counties) {

        // A bisector since many nation's data is sparsely-defined.
        var bisect = d3.bisector(function(d) { return d[0]; });

        // Add a dot per nation. Initialize the data at 1800, and set the colors.
        var dot = svg.append("g")
            .attr("class", "dots")
            .selectAll(".dot")
            .data(interpolateData(1990))
            //.data(counties)
            .enter().append("circle")
            .attr("class", "dot")
            .style("fill", function(d) { return colorScale(color(d)); })
            .call(position)
            .sort(order);


        // Add a title.
        dot.append("title")
            .text(function(d) { return d.Area;});

        // Add an overlay for the year label.
        var box = label.node().getBBox();

        var overlay = svg.append("rect")
            .attr("class", "overlay")
            .attr("x", box.x)
            .attr("y", box.y)
            .attr("width", box.width)
            .attr("height", box.height)
            .on("mouseover", enableInteraction);

        // Start a transition that interpolates the data based on year.
        svg.transition()
            .duration(30000)
            .ease("linear")
            .tween("year", tweenYear)
            .each("end", enableInteraction);

        // Positions the dots based on data.
        function position(dot) {
            dot .attr("cx", function(d) { return xScale(x(d)); })
                .attr("cy", function(d) { return yScale(y(d)); })
                .attr("r", function(d) { return radiusScale(radius(d)); });
        }

        // Defines a sort order so that the smallest dots are drawn on top.
        function order(a, b) {
            return radius(b) - radius(a);
        }

        // After the transition finishes, you can mouseover to change the year.
        function enableInteraction() {
            var yearScale = d3.scale.linear()
                .domain([1990, 2040])
                .range([box.x + 10, box.x + box.width - 10])
                .clamp(true);

            svg.append("text")
                .attr("class","year label")
                .attr("dx",75)
                .attr("dy",50)
                .style("font-size", "55px")
                .style("font-variant", "small-caps")
                .style("opacity", 0)
                .text("1 in 4 will be 60+ by 2040")
                .transition()
                .style("opacity", 1);

            // Cancel the current transition, if any.
            svg.transition().duration(0);

            overlay
                .on("mouseover", mouseover)
                .on("mouseout", mouseout)
                .on("mousemove", mousemove)
                .on("touchmove", mousemove);

            function mouseover() {
                label.classed("active", true);
            }

            function mouseout() {
                label.classed("active", false);
            }

            function mousemove() {
                displayYear(yearScale.invert(d3.mouse(this)[0]));
            }
        }

        // Tweens the entire chart by first tweening the year, and then the data.
        // For the interpolated data, the dots and label are redrawn.
        function tweenYear() {
            var year = d3.interpolateNumber(1990, 2040);

            return function(t) { displayYear(year(t)); };
        }

        // Updates the display to show the specified year.
        function displayYear(year) {
            var interpData = interpolateData(year);
            dot.data(interpolateData(year), key).call(position).sort(order);
            dot.selectAll("title").data(interpolateData(year), key).text(function(d) { return key(d) + "\n" + "Total Population: "
                + Math.round(radius(d)) + "\n" + "60+ Pop: " + Math.round(y(d)) + "\n" + "Percent Over 60: "
                + Math.round(x(d) * 100) + "%"; })
            label.text(Math.round(year));
        }

        // Interpolates the dataset for the given (fractional) year.
        function interpolateData(year) {
            return counties.map(function(d) {
                return {
                    Area: d.Area,
                    pop_60: interpolateValues(d.pop_60, year),
                    tot_pop: interpolateValues(d.tot_pop, year),
                    pct_tot: interpolateValues(d.pct_tot, year)
                };
            });
        }

        // Finds (and possibly interpolates) the value for the specified year.
        function interpolateValues(values, year) {
            var i = bisect.left(values, year, 0, values.length - 1),
                a = values[i];
            if (i > 0) {
                var b = values[i - 1],
                    t = (year - a[0]) / (b[0] - a[0]);
                return a[1] * (1 - t) + b[1] * t;
            }
            return a[1];
        }
    });

    var legendW = 450 - margin.right;
    var legendH = 55 - margin.top - margin.bottom;

//You can append the SVG graphic generated by D3 to any html tag by replacing "body" with the
//class, ID, or element catagory needed.
    var legendSvg = d3.select(".aging-forecast-chart-canvas").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", legendH + margin.top  + margin.bottom)
        .style("position", "relative")
        .style("top", "10px")
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top  + ")")



    d3.json("data/dynamic_bubble_data2.json", function(counties){




        var legendDot = legendSvg.append("g")
            .attr("class","dots")
            .selectAll("g")
            .data(counties)
            .enter()
            .append("circle")
            .call(sizeCircles)
            .style("fill", function(d) { return colorScale(color(d)); });

        legendSvg.selectAll("text")
            .data(counties)
            .enter()
            .append("text")
            .attr("dx", function(d,i){return (i*90) + 10; })
            .text(function(d){return d.Area;})
            .style("font-size","12px");



        function sizeCircles(dot){
            dot .attr("cx", function(d,i) { return i*90; })
                .attr("cy", "10")
                .attr("r", "10" );
        }
//
//




    });

})